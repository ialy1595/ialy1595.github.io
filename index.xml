<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ialy&#39;s blog</title>
    <link>https://ialy1595.github.io/</link>
    <description>Recent content on ialy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>ialy12006@gmail.com (ialy1595)</managingEditor>
    <webMaster>ialy12006@gmail.com (ialy1595)</webMaster>
    <lastBuildDate>Tue, 10 Nov 2020 18:55:30 +0900</lastBuildDate>
    
	<atom:link href="https://ialy1595.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Manacher 알고리즘</title>
      <link>https://ialy1595.github.io/post/manacher/</link>
      <pubDate>Tue, 10 Nov 2020 18:55:30 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/manacher/</guid>
      <description>개요 이 알고리즘은 회문(팰린드롬, palindrome)에 관해서 빠른 시간 안에 강력한 솔루션을 제공한다. 여기서 회문이란 $ abcba $처럼 뒤집어서 읽어도 똑같은 문자열을 뜻한다. 여기에 Manacher 알고리즘을 통해 문자열의 모든 위치에 대해서 그 위치를 중심으로 하는 최대 회문의 한쪽 길이를 $ O(n) $안에 구할 수 있다.</description>
    </item>
    
    <item>
      <title>Nginx로 한 도메인에서 여러 프로젝트 배포하기</title>
      <link>https://ialy1595.github.io/post/nginx-publish-in-same-domain/</link>
      <pubDate>Wed, 02 Sep 2020 13:41:26 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/nginx-publish-in-same-domain/</guid>
      <description>혹시 바빠서 해결법만 원하신 분들은 맨 아래 결론을 보시면 됩니다.
배경 상황 최근에 웹 관련 프로젝트들을 이것저것 하게 되면서 만든 프로젝트를 배포하기 위해 서버와 도메인도 샀다. 하지만 매번 프로젝트를 하나씩 추가할 때마다 도메인을 새로 사는 flex를 할 수는 없었다.</description>
    </item>
    
    <item>
      <title>npm 패키지 korea-index-of 개발기</title>
      <link>https://ialy1595.github.io/post/korean-index-of/</link>
      <pubDate>Tue, 01 Sep 2020 15:39:16 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/korean-index-of/</guid>
      <description>이 프로젝트의 결과는 여기, 코드는 여기에서 볼 수 있습니다.
개발 배경 아래 배경에 관한 자세한 설명은 이전 글에서 다뤘으므로 있으니 여기선 간략하게만 설명하고 넘어가자.
한글의 incremental search 요즘 점점 늘어나고 있는 검색 관련 UX로 incremental search가 있다.</description>
    </item>
    
    <item>
      <title>문자열 매칭 알고리즘 (KMP, Z-Array)</title>
      <link>https://ialy1595.github.io/post/string-match/</link>
      <pubDate>Wed, 29 Jul 2020 18:52:50 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/string-match/</guid>
      <description>문자열 매칭 문자열을 다루는 문제가 여러 종류가 있지만 그 중 가장 널리 쓰이는 것이 긴 문자열($ data $)에서 어떤 문자열($ query $)가 속해있는지 확인하는 문자열 매칭을 활용하는 것이다. 쉽게 말하면 우리가 인터넷 서핑이나 에디터에서 문서 작업을 할 때 ctrl + f로 단어를 찾는 작업을 구현한다고 생각하면 된다.</description>
    </item>
    
    <item>
      <title>파라매트릭 서치 (Parametric Search)</title>
      <link>https://ialy1595.github.io/post/parametric-search/</link>
      <pubDate>Fri, 24 Jul 2020 17:53:52 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/parametric-search/</guid>
      <description>문제를 해결하는 방법 우리가 어떤 문제를 접했을 때 이를 해결하는 방법에는 크게 두 가지가 있다. 첫 번째는 문제의 조건을 가지고 잘 계산을 해서 답을 도출해내는 것이고, 두 번째는 그 문제를 결정문제로 변형을 해서 이분탐색을 활용하여 해결하는 방법이다.</description>
    </item>
    
    <item>
      <title>인덱스 트리 (Indexed Tree)</title>
      <link>https://ialy1595.github.io/post/binary-indexed-tree/</link>
      <pubDate>Sun, 08 Mar 2020 19:19:01 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/binary-indexed-tree/</guid>
      <description>개요 이 자료구조는 point update와 range query를 해야 하는 상황에서 사용된다. 더 자세히 말하자면 길이가 $ n $인 수열에 $ a $ 대해
 point update: ($ i $, $ x $) =&amp;gt; $ a[i] $를 $ x $로 치환 range query: ($ l $, $ r $) =&amp;gt; $ a[l] \sim a[r] $ 중 sum/max/min 등 구하기.</description>
    </item>
    
    <item>
      <title>동적계획법 (Dynamic Programming, DP)</title>
      <link>https://ialy1595.github.io/post/dynamic-programming/</link>
      <pubDate>Thu, 05 Mar 2020 18:45:29 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/dynamic-programming/</guid>
      <description>동적계획법은 이름부터 생소하다. 종만북에 따르면 동적계획법을 만든 벨만(벨만포드 알고리즘 창시자)은 단순히 dynamic이라는 단어가 멋있어서 선택했다고 한다(&amp;hellip;) 따라서 컴퓨터공학부에서 흔히 쓰이는 dynamic의 의미로 생각하려고 하면 이 알고리즘이 어떤 내용일지 감을 잡을 수 없다.</description>
    </item>
    
    <item>
      <title>Brute Force</title>
      <link>https://ialy1595.github.io/post/brute-force/</link>
      <pubDate>Sun, 28 Apr 2019 22:03:06 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/brute-force/</guid>
      <description>한국말로 전수탐색이라고 부르기도 한다. 하지만 단순히 모든 경우의 수를 탐색해 본다는 전수탐색의 의미보단 일단 무식하게 부딪혀본다는 의미를 담은 brute force 표현이 더 좋다. 사실 brute force는 알고리즘이라 불릴 수 있을지 미지수일 정도로 매우 단순무식한 방법이다.</description>
    </item>
    
    <item>
      <title>시간복잡도 (Time Complexity)</title>
      <link>https://ialy1595.github.io/post/time-complexity/</link>
      <pubDate>Tue, 16 Apr 2019 21:28:24 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/time-complexity/</guid>
      <description>효율적인 코드란 우리는 프로그램을 만들기 위해 코드를 작성한다. 여기서 프로그램이란 어떤 input을 넣었을 때 원하는 output이 나오도록 하는 것이다. 하지만 같은 input을 넣었을 때 같은 output이 나왔다고 해서 다 같은 프로그램은 아니다.</description>
    </item>
    
    <item>
      <title>Datapath and Control Unit</title>
      <link>https://ialy1595.github.io/post/datapath-and-control-unit/</link>
      <pubDate>Thu, 21 Mar 2019 17:12:20 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/datapath-and-control-unit/</guid>
      <description>Datapath Datapath는 CPU에서 직접적으로 연산이 이루어지는 부분이다. 따라서 연산을 하거나 연산된 결과를 저장할 register file과 연산이 실행되는 ALU로 이루어져 있다. 그리고 memory와 데이터를 주고받아야하기 때문에 memory와도 연결되었다. 그리고 이 데이터들은 버스에 담겨서 각각 부분으로 들어간다.</description>
    </item>
    
    <item>
      <title>한글의 incremental search UX 와 인코딩</title>
      <link>https://ialy1595.github.io/post/korean-incremental-search/</link>
      <pubDate>Sun, 03 Mar 2019 17:23:53 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/korean-incremental-search/</guid>
      <description>한글 검색의 문제점 우리는 수많은 데이터 속에서 살아간다. 이렇게 많은 데이터 속에서 내가 원하는 정보를 얻기 위해 검색이라는 기능은 필수적이다. 세계적으로 보면 구글, 한국에서 보면 네이버 처럼 검색 엔진을 기반으로 둔 기업이 크게 성장한 것만 봐도 검색이라는 기능이 얼마나 중요한지 알 수 있다.</description>
    </item>
    
    <item>
      <title>블로그 구축기 2 (Hugo Theme Customizing)</title>
      <link>https://ialy1595.github.io/post/blog-construct-2/</link>
      <pubDate>Fri, 01 Mar 2019 12:37:41 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/blog-construct-2/</guid>
      <description>이제 자신이 만든 블로그를 감상해보자. 마음에 드는가? 물론 마음에 쏙 들수도 있지만 아무래도 자기가 직접 만든 것이 아니라 남이 만든 테마를 가져다 쓰는 것이기 때문에 맘에 안 드는 점이 있을 수도 있다.</description>
    </item>
    
    <item>
      <title>블로그 구축기 1 (Hugo &#43; github.io)</title>
      <link>https://ialy1595.github.io/post/blog-construct-1/</link>
      <pubDate>Fri, 22 Feb 2019 20:07:41 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/blog-construct-1/</guid>
      <description>예전에는 문서화 작업에 그렇게 큰 신경을 두지 않았다. 프로젝트를 진행할 때 이것저것 삽질해보고 구글링하면서 문제를 해결하고선 이를 따로 정리해 두지 않고 완성해서 잘 동작시키는 것에만 의의를 두었다. 그러다보니 예전에 부딪혔던 문제를 다시 만나도 어떻게 해결했는지 기억이 안 나서 결국 같은 작업을 반복하는 경우가 생겼다.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://ialy1595.github.io/about/</link>
      <pubDate>Mon, 04 Feb 2019 10:25:27 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/about/</guid>
      <description>Education  Gyeonggi Science High School (GSHS) (Mar 2012 - Feb 2015)
 Seoul National University (SNU) (Mar 2015 – Present)
 B.S. in Computer Science and Engineering   Interest Fields  Problem Solving  Algorithm, Data structure  Human Computer Interaction  UI/UX, Gamification, Human Computing  Design  Game design, project managing   Projects korean-index-of (npm) (repository) When you type &amp;ldquo;코드&amp;rdquo;, the process is &amp;ldquo;ㅋ&amp;rdquo;, &amp;ldquo;코&amp;rdquo;, &amp;ldquo;콛&amp;rdquo;, and &amp;ldquo;코드&amp;rdquo;, only &amp;ldquo;코&amp;rdquo; and &amp;ldquo;코드&amp;rdquo; is substring of &amp;ldquo;코드&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Sequential Logic</title>
      <link>https://ialy1595.github.io/post/sequential-logic/</link>
      <pubDate>Sun, 03 Feb 2019 19:53:09 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/sequential-logic/</guid>
      <description>Sequential logic이란 같은 input이 들어왔다고 해도 logic의 state나 memory에 따라 결과가 달라지는 logic을 의미한다. 이러한 sequential logic이 존재할 수 있는 중요한 요소 중 하나는 gate가 이상적이지 않아서 delay가 존재한다는 것이다.</description>
    </item>
    
    <item>
      <title>Combinational Logic</title>
      <link>https://ialy1595.github.io/post/combinational-logic/</link>
      <pubDate>Wed, 26 Sep 2018 18:27:42 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/combinational-logic/</guid>
      <description>Combinational Logic에서는 이전에 basic logic gate를 다루면서 만들었던 재료인 NOT, AND, OR, NAND, NOR을 가지고 요리를 해볼 것이다. 하지만 그 전에 Combinational Logic과 Sequential Logic의 차이 대해 먼저 알아보자.</description>
    </item>
    
    <item>
      <title>Trangister and Basic Logic Gate</title>
      <link>https://ialy1595.github.io/post/trangister-and-basic-logic-gate/</link>
      <pubDate>Tue, 31 Jul 2018 02:13:42 +0900</pubDate>
      <author>ialy12006@gmail.com (ialy1595)</author>
      <guid>https://ialy1595.github.io/post/trangister-and-basic-logic-gate/</guid>
      <description>컴퓨터공학부에 입학하고 처음으로 들은 전공 관련 수업이 컴퓨터 개론 및 실습이었는데, 코딩을 배울 것이라고 생각했던 것과 달리 갑자기 반도체와 트랜지스터가 나와서 멘붕했던 내용이다. 그 당시에는 전기과도 아닌데 이런 것을 왜하나 생각을 했지만 배우고 나서 뒤의 흐름을 익히니 기초부터 하나씩 쌓아올려 나가려는 큰 그림이었음을 깨달았다.</description>
    </item>
    
  </channel>
</rss>